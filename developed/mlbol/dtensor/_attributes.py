from typing import Dict, Any

int32: type = ...
int64: type = ...
float32: type = ...
float64: type = ...
complex64: type = ...
complex128: type = ...
e: float = ...
pi: float = ...
nan: float = ...
inf: float = ...


class Tensor:
    """Base class for dense tensors, dynamically inherited from third-party packages."""

    ndim: int
    shape: tuple[int]
    dtype: type

    @property
    def context(self) -> Dict[str, Any]: ...
